plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'pl.peth'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.integration:spring-integration-mqtt'
	implementation 'org.springframework.boot:spring-boot-starter-integration'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-influx'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	testImplementation 'org.mockito:mockito-core'
	testImplementation 'org.mockito:mockito-junit-jupiter'
	testImplementation 'org.testcontainers:junit-jupiter:1.18.3'
	testImplementation 'org.testcontainers:mongodb:1.18.3'
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.9"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}

	// Ausschluss von Klassen die nicht getestet werden sollen
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/HsboSpringDemoApplication.class',
					'**/config/**',
					'**/dto/**',
					'**/model/**'
			])
		}))
	}
}

jacocoTestCoverageVerification {
	dependsOn jacocoTestReport
	violationRules {
		rule {
			limit {
				minimum = 0.70
			}
		}
		rule {
			enabled = true
			element = 'CLASS'
			excludes = [
					'pl.peth.hsbo_spring_demo.HsboSpringDemoApplication',
					'pl.peth.hsbo_spring_demo.config.*',
					'pl.peth.hsbo_spring_demo.dto.*',
					'pl.peth.hsbo_spring_demo.model.*'
			]
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.60
			}
		}
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

check {
	dependsOn jacocoTestCoverageVerification
}
